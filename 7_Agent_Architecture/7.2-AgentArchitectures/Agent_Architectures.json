{
  "name": "Agent Architecture",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "16491351-555c-49ea-8974-1e9f60aee3cc",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        1980,
        2340
      ],
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2380,
        2340
      ],
      "id": "ebde7b6d-5f3f-4488-8ee2-d408d864ba1a",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "operation": "sendAndWait",
        "user": {
          "__rl": true,
          "value": "U08S4Q86MR7",
          "mode": "list",
          "cachedResultName": "cole"
        },
        "message": "=please APPROVE or DECLINE this message:\n\n{{ $('When Executed by Another Workflow').item.json.message }}",
        "approvalOptions": {
          "values": {
            "approvalType": "double"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        680,
        2260
      ],
      "id": "53c90c19-1bdc-46ac-aad4-b757f7db2d75",
      "name": "Slack",
      "webhookId": "fec140b6-b33d-4d9f-b48a-f7e84ebe0bfb",
      "credentials": {
        "slackOAuth2Api": {
          "id": "aIFdokXUeAtAOjW0",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "model": "gpt-4.1-mini",
        "options": {}
      },
      "id": "a8851294-0cde-458f-bb0e-d903891c7fd9",
      "name": "OpenAI Chat Model3",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -80,
        2400
      ],
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.data.approved }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "0a675740-e73f-4332-b2dc-e628e2499676"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "APPROVED"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8b61a1ad-7442-429b-a541-3f5d280a0788",
                    "leftValue": "={{ $json.data.approved }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "DENIED"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        920,
        2260
      ],
      "id": "4b7bf032-a986-4830-afb0-b15753cc81d8",
      "name": "Switch1"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C08RSGUJK1R",
          "mode": "list",
          "cachedResultName": "research"
        },
        "text": "=Here is the APPROVED message:  \n\n{{ $('When Executed by Another Workflow').item.json.message }}",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        1200,
        2140
      ],
      "id": "9d7f8529-6989-40df-860e-a33d2e8c1687",
      "name": "Slack1",
      "webhookId": "ceaa4e78-596e-418f-9218-718534897b0d",
      "credentials": {
        "slackOAuth2Api": {
          "id": "aIFdokXUeAtAOjW0",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C08RSGUJK1R",
          "mode": "list",
          "cachedResultName": "research"
        },
        "text": "=Here is the DECLINED message: \n\n{{ $('When Executed by Another Workflow').item.json.message }}",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        1200,
        2360
      ],
      "id": "6a7f1dac-5494-48e2-b698-e7028ea875fb",
      "name": "Slack2",
      "webhookId": "ff85accd-3fba-4eb5-a558-e8e8309096ee",
      "credentials": {
        "slackOAuth2Api": {
          "id": "aIFdokXUeAtAOjW0",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "model": "gpt-4.1-mini",
        "options": {}
      },
      "id": "ab7e0c8a-f867-4e11-ad13-b41ead56e2d0",
      "name": "OpenAI Chat Model4",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -3380,
        2380
      ],
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "errorMessage": "An error has occured!"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        4780,
        2360
      ],
      "id": "280d7e1e-3032-4913-b5cd-2a4fa2496279",
      "name": "Stop and Error",
      "executeOnce": false,
      "alwaysOutputData": false,
      "notesInFlow": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "operation": "sendAndWait",
        "user": {
          "__rl": true,
          "value": "U08S4Q86MR7",
          "mode": "list",
          "cachedResultName": "cole"
        },
        "message": "=Please APPROVE or DECLINE this message",
        "approvalOptions": {
          "values": {
            "approvalType": "double"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        4320,
        2240
      ],
      "id": "d78e43bb-5d4f-4ef5-aa97-451a8778f70e",
      "name": "Slack3",
      "webhookId": "fec140b6-b33d-4d9f-b48a-f7e84ebe0bfb",
      "credentials": {
        "slackOAuth2Api": {
          "id": "aIFdokXUeAtAOjW0",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.data.approved }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "0a675740-e73f-4332-b2dc-e628e2499676"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "APPROVED"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8b61a1ad-7442-429b-a541-3f5d280a0788",
                    "leftValue": "={{ $json.data.approved }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "DENIED"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        4520,
        2240
      ],
      "id": "413250b4-e5d0-4fd5-8fc2-3010f264c494",
      "name": "Switch2"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C08RSGUJK1R",
          "mode": "list",
          "cachedResultName": "research"
        },
        "text": "=Message is approved",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        4780,
        2140
      ],
      "id": "e3fbba34-92cc-4582-8569-3cc7be139a42",
      "name": "Slack4",
      "webhookId": "ff85accd-3fba-4eb5-a558-e8e8309096ee",
      "credentials": {
        "slackOAuth2Api": {
          "id": "aIFdokXUeAtAOjW0",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [
        5000,
        2260
      ],
      "id": "4081d2c9-14be-4d5c-ad73-07e843662d62",
      "name": "Error Trigger"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        4140,
        2240
      ],
      "id": "64c46d13-fece-47f0-ac43-49065ba9d754",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=\nYou are a standalone food critic Agent. You operate as the final check in the workflow to ensure that the final response follows the following guidelines for Output Check, Format Validator, Content Filter:\n\n\t•\tContent Filter – Ensure the response includes where the dish originates and a description of the dish \n\nEXAMPLE: \nName: Moussaka\nDescription: Originating in Greece, moussaka is a layered casserole of tender eggplant slices and spiced ground lamb (or beef), all topped with a silky béchamel sauce and baked until golden and bubbling. It’s a comforting dish that combines Mediterranean flavors—olive oil, cinnamon, and tomato—with a rich, creamy finish.\n\n\n\t•\tOutput Check – ensure name and description are present \n\t\nOutput false for 'valid' and your feedback for 'feedback' if the response from the other agent didn't follow the guidelines for the output check, content filter, etc.\n\nOutput true for 'valid' if it did. Don't be too picky.\n\n"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        2400,
        2140
      ],
      "id": "d3c3ad9f-2005-41fc-bfc9-45c8386c88e8",
      "name": "Critic Node"
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appu9xcTfFpUJ1pwp",
          "mode": "list",
          "cachedResultName": "Restaurant",
          "cachedResultUrl": "https://airtable.com/appu9xcTfFpUJ1pwp"
        },
        "table": {
          "__rl": true,
          "value": "tblb2LYwGNnjfF9eb",
          "mode": "list",
          "cachedResultName": "Dishes",
          "cachedResultUrl": "https://airtable.com/appu9xcTfFpUJ1pwp/tblb2LYwGNnjfF9eb"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtableTool",
      "typeVersion": 2.1,
      "position": [
        -260,
        900
      ],
      "id": "a333543c-000a-40dc-b21a-10712c819e71",
      "name": "Menu Table",
      "credentials": {
        "airtableTokenApi": {
          "id": "GsTR1ZYQmElJWLUF",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "content": "## LLM, Memory, and Tool Nodes\n",
        "height": 485,
        "width": 656,
        "color": 4
      },
      "id": "2d68ff9f-86ea-4b5f-a3f0-4b2fac184148",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3480,
        2060
      ]
    },
    {
      "parameters": {
        "content": "## User Input and Control Nodes\n\n",
        "height": 545,
        "width": 1656,
        "color": 6
      },
      "id": "9e2ea9a6-b12c-4162-8b5c-13997a297b6f",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -200,
        2040
      ]
    },
    {
      "parameters": {
        "content": "## Guardrail Node",
        "height": 565,
        "width": 1556
      },
      "id": "c7a27d7a-5d93-440b-97d4-76c5d12beaab",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1900,
        2040
      ]
    },
    {
      "parameters": {
        "content": "## Fallback Node\n",
        "height": 525,
        "width": 1416,
        "color": 3
      },
      "id": "01fce480-a5cc-4f0f-965b-62313565ed0a",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        4040,
        2060
      ]
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -3200,
        2380
      ],
      "id": "6509698b-2510-4e1d-8d5a-aabcddcdeeeb",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "ezhtjmm7WxmXJLU8",
          "name": "Self Hosted Supabase"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "options": {
          "systemMessage": "=here is the current date/time : {{ $now }}"
        }
      },
      "id": "2dd2b81d-ba7d-4ea4-927e-68f149a11edf",
      "name": "AI Agent1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        -3280,
        2160
      ]
    },
    {
      "parameters": {
        "model": "gpt-4.1-mini",
        "options": {}
      },
      "id": "1fe3ad66-288d-422c-812c-9efd8bcc4af2",
      "name": "OpenAI Chat Model8",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -2160,
        2380
      ],
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "## More Detailed Memory Nodes\n",
        "height": 505,
        "width": 1676,
        "color": 5
      },
      "id": "59f167f7-5513-4d87-acad-cb1f86a52abc",
      "name": "Sticky Note11",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2340,
        2060
      ]
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When chat message received').item.json.sessionId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -1980,
        2380
      ],
      "id": "55502b82-7427-443e-801c-df6a1646abc3",
      "name": "Postgres Chat Memory1",
      "credentials": {
        "postgres": {
          "id": "ezhtjmm7WxmXJLU8",
          "name": "Self Hosted Supabase"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1720,
        2380
      ],
      "id": "7c97d229-ebe2-4a5b-adad-bb3a2dc5b3e8",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "documentURL": "15sBOoqCJjIggmtG9aEFPFe3AFS_G6iMOZQmT6wkkRVM"
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        -2260,
        2160
      ],
      "id": "b083f48f-6617-4aaa-ab91-865efb1b43d3",
      "name": "Get Memories",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "tJPWOFJCX9kAe4Zv",
          "name": "Google Docs account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentURL": "15sBOoqCJjIggmtG9aEFPFe3AFS_G6iMOZQmT6wkkRVM",
        "actionsUi": {
          "actionFields": [
            {
              "action": "insert",
              "text": "={{ $json.text }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        -1060,
        2160
      ],
      "id": "7fff50c8-730c-44b7-a657-73e79cea0fa7",
      "name": "Save Memories",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "tJPWOFJCX9kAe4Zv",
          "name": "Google Docs account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=User message:\n\n{{ $('When chat message received').item.json.chatInput }}\n\nBased on the user message above, extract any key memories that should be stored for later converastions. Just output nothing (an empty string) if there are no important memories to be made here. Otherwise if there are good memories, output just those to store directly in the memory bank"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -1680,
        2160
      ],
      "id": "f8db7cf0-e005-4a94-9ee2-8f9e22bf35d8",
      "name": "Extract Memories"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ffe35d80-0ebf-4b26-b292-dc870fd83413",
              "leftValue": "={{ $json.text }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1320,
        2160
      ],
      "id": "c2ede679-d344-4f9b-a07a-87171847d818",
      "name": "If"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1ea78aec-3a4d-48f2-bf20-ba69229646f0",
              "name": "output",
              "value": "={{ $('AI Agent2').item.json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -880,
        2360
      ],
      "id": "720a52e4-ab18-45ac-ad22-27b09adb1948",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When chat message received').item.json.chatInput }}",
        "options": {
          "systemMessage": "You are an AI agent that recommeds dishes you don't do anything else."
        }
      },
      "id": "877e51bd-f07b-49ef-b268-66d81565b006",
      "name": "AI Agent4",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        2020,
        2140
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Here are your long term memories:\n\n{{ $json.content }}\n\nThen here is the user message, this is what you need to respond to:\n\n{{ $('When chat message received').item.json.chatInput }}",
        "options": {
          "systemMessage": "=here is the current date/time : {{ $now }}"
        }
      },
      "id": "40ee313b-84a1-4a53-b109-1f033ef0edf5",
      "name": "AI Agent2",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        -2040,
        2160
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "options": {
          "systemMessage": ""
        }
      },
      "id": "8d14435f-dbd3-4fe8-b906-9f0d6274f02e",
      "name": "AI Agent3",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        -40,
        2180
      ]
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"valid\": false,\n\t\"feedback\": \"Make sure you include the origin of the dish!\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        2580,
        2340
      ],
      "id": "60f9fc51-de5b-4083-80db-3ebf7f9101a1",
      "name": "Structured Output Parser3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7dbaedb8-9254-4df9-be0c-2895594ce919",
              "leftValue": "={{ $json.output.valid }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2760,
        2140
      ],
      "id": "43995ae1-72e2-408c-86b4-c697e51c8cb0",
      "name": "If1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8649ff8f-56ad-431a-a701-2f3a06ca43d9",
              "name": "output",
              "value": "={{ $('AI Agent4').item.json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3040,
        2100
      ],
      "id": "fc1b4413-9656-4e71-8ef9-1fdbc67c0079",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When chat message received').item.json.sessionId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        2140,
        2340
      ],
      "id": "b7b21c12-198e-491b-a3ae-1c544c4018ef",
      "name": "Postgres Chat Memory2",
      "credentials": {
        "postgres": {
          "id": "ezhtjmm7WxmXJLU8",
          "name": "Self Hosted Supabase"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "127eeb7c-2ff6-41d4-9e31-cbd9037e8205",
      "name": "OpenAI Chat Model9",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        2900,
        2460
      ],
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Any feedback from the critque agent:\n\n{{ $json?.output?.feedback || \"\" }}\n\nUser message:\n\n{{ $('When chat message received').item.json.chatInput }}",
        "options": {
          "systemMessage": "You are an AI agent that recommeds dishes you don't do anything else."
        }
      },
      "id": "88e3d1a7-bf2d-421a-ac29-9bc07e64b1e2",
      "name": "AI Agent5",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        2960,
        2280
      ]
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When chat message received').item.json.sessionId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        3060,
        2460
      ],
      "id": "15327880-749a-4493-985d-99e6f61a89bd",
      "name": "Postgres Chat Memory4",
      "credentials": {
        "postgres": {
          "id": "ezhtjmm7WxmXJLU8",
          "name": "Self Hosted Supabase"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "user",
        "user": {
          "__rl": true,
          "value": "U08S4Q86MR7",
          "mode": "list",
          "cachedResultName": "cole"
        },
        "text": "={{ $json.execution.error.message }}",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        5200,
        2260
      ],
      "id": "4a54d68a-4bd7-4770-8313-ee0fd518f177",
      "name": "Slack7",
      "webhookId": "ff85accd-3fba-4eb5-a558-e8e8309096ee",
      "credentials": {
        "slackOAuth2Api": {
          "id": "aIFdokXUeAtAOjW0",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "name": "send_slack_message",
        "description": "Sends a slack message based on the message you provide",
        "workflowId": {
          "__rl": true,
          "mode": "id",
          "value": "={{$workflow.id}}",
          "cachedResultName": "={{$workflow.id}}"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "message": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('message', ``, 'string') }}"
          },
          "matchingColumns": [
            "message"
          ],
          "schema": [
            {
              "id": "message",
              "displayName": "message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        160,
        2400
      ],
      "id": "47057083-b372-4c07-9ae2-a105644e0725",
      "name": "Call n8n Workflow Tool"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "message"
            },
            {
              "name": "subagent"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        420,
        2260
      ],
      "id": "7451d35e-6592-48b2-a4a6-18c0f130a3d6",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "operation": "create",
        "base": {
          "__rl": true,
          "value": "appu9xcTfFpUJ1pwp",
          "mode": "list",
          "cachedResultName": "Restaurant",
          "cachedResultUrl": "https://airtable.com/appu9xcTfFpUJ1pwp"
        },
        "table": {
          "__rl": true,
          "value": "tblb2LYwGNnjfF9eb",
          "mode": "list",
          "cachedResultName": "Dishes",
          "cachedResultUrl": "https://airtable.com/appu9xcTfFpUJ1pwp/tblb2LYwGNnjfF9eb"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Dish Name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Dish_Name', ``, 'string') }}",
            "Dish Description": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Dish_Description', ``, 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Dish Name",
              "displayName": "Dish Name",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Dish Description",
              "displayName": "Dish Description",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtableTool",
      "typeVersion": 2.1,
      "position": [
        -3020,
        2380
      ],
      "id": "6bbbdf3c-7a6f-4f92-90c6-2eeea03c1f85",
      "name": "Airtable2",
      "credentials": {
        "airtableTokenApi": {
          "id": "GsTR1ZYQmElJWLUF",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "e6826c6a-c766-4858-b11f-557c9d6e044b",
      "name": "OpenAI Chat Model5",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -600,
        900
      ],
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Full Example",
        "height": 765,
        "width": 3116
      },
      "id": "9bca1c6e-117b-45cc-9118-0afd5d4951c8",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -960,
        540
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Your memories from the user:\n\n{{ $json.content }}\n\nThe user request:\n\n{{ $('When chat message received').item.json.chatInput }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are an AI agent that recommeds dishes you don't do anything else."
        }
      },
      "id": "b563352a-ae44-4209-8fde-cb174440ae6d",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        -440,
        660
      ]
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When chat message received').item.json.sessionId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -400,
        900
      ],
      "id": "2e8c14a1-c615-43de-9d2a-0a54e2d09115",
      "name": "Postgres Chat Memory5",
      "credentials": {
        "postgres": {
          "id": "ezhtjmm7WxmXJLU8",
          "name": "Self Hosted Supabase"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"dish name\": \"Harvest Moon Risotto\",\n\t\"dish description\": \"A creamy Arborio rice dish studded with tender roasted butternut squash and wilted spinach, enriched by a sage-infused brown butter and finished with a shower of freshly grated Parmesan and toasted pepitas for a nutty crunch.\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        0,
        1120
      ],
      "id": "819b614e-189e-4b6a-849c-f63e27a77405",
      "name": "Structured Output Parser4"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
      "typeVersion": 1,
      "position": [
        -100,
        900
      ],
      "id": "5a042cdb-310e-4ca7-9418-617a4bbbc187",
      "name": "Auto-fixing Output Parser1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -180,
        1100
      ],
      "id": "b3642ceb-29d2-456d-9311-41e651c32536",
      "name": "OpenAI Chat Model13",
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        940,
        900
      ],
      "id": "728bda0b-3bff-4f83-94cc-ff800d651505",
      "name": "OpenAI Chat Model10",
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "documentURL": "15sBOoqCJjIggmtG9aEFPFe3AFS_G6iMOZQmT6wkkRVM"
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        -660,
        660
      ],
      "id": "5ab0d9f4-eb1e-4168-8dde-91ebeffd264b",
      "name": "Get Memories1",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "tJPWOFJCX9kAe4Zv",
          "name": "Google Docs account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentURL": "15sBOoqCJjIggmtG9aEFPFe3AFS_G6iMOZQmT6wkkRVM",
        "actionsUi": {
          "actionFields": [
            {
              "action": "insert",
              "text": "={{ $json.text }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        1560,
        680
      ],
      "id": "fba907f1-8591-408c-a095-2b5f45beb413",
      "name": "Save Memories1",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "tJPWOFJCX9kAe4Zv",
          "name": "Google Docs account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=User message:\n\n{{ $('When chat message received').item.json.chatInput }}\n\nBased on the user message above, extract any key memories that should be stored for later converastions. Just output nothing (an empty string) if there are no important memories to be made here. Otherwise if there are good memories, output just those to store directly in the memory bank"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        1000,
        680
      ],
      "id": "4cfe184b-33b9-499e-a6e5-6aa2bbd0980c",
      "name": "Extract Memories1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ffe35d80-0ebf-4b26-b292-dc870fd83413",
              "leftValue": "={{ $json.text }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1360,
        800
      ],
      "id": "b9b1daf3-8639-4927-90f6-ce6ffe07d196",
      "name": "If2"
    },
    {
      "parameters": {
        "errorMessage": "The dish has been rejected!"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        560,
        940
      ],
      "id": "90300315-b61e-4407-8c61-3d77d6520f54",
      "name": "Stop and Error2",
      "executeOnce": false,
      "alwaysOutputData": false,
      "notesInFlow": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.data.approved }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "0a675740-e73f-4332-b2dc-e628e2499676"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "APPROVED"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8b61a1ad-7442-429b-a541-3f5d280a0788",
                    "leftValue": "={{ $json.data.approved }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "DENIED"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        260,
        760
      ],
      "id": "e4f44f87-ec44-4bb2-aed0-f05f3bdfe95d",
      "name": "Switch"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C08RSGUJK1R",
          "mode": "list",
          "cachedResultName": "research"
        },
        "text": "=[CONFIRMED] here is the APPROVED dish:\n\ndish name: {{ $('AI Agent').item.json.output['dish name'] }}\n\ndish description: {{ $('AI Agent').item.json.output['dish description'] }}",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        560,
        680
      ],
      "id": "7bccaae6-cd9f-46fb-a7d7-8a0f83f924bc",
      "name": "Slack8",
      "webhookId": "ff85accd-3fba-4eb5-a558-e8e8309096ee",
      "credentials": {
        "slackOAuth2Api": {
          "id": "aIFdokXUeAtAOjW0",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "operation": "sendAndWait",
        "user": {
          "__rl": true,
          "value": "U08S4Q86MR7",
          "mode": "list",
          "cachedResultName": "cole"
        },
        "message": "=Please APPROVE or DECLINE this dish based on ingredient availability\n\ndish name: {{ $json.output['dish name'] }}\n\ndish discription: {{ $json.output['dish description'] }}",
        "approvalOptions": {
          "values": {
            "approvalType": "double"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        0,
        660
      ],
      "id": "71cc9bfc-672d-4ee3-bfa1-61ccb2e75dd8",
      "name": "Slack9",
      "webhookId": "fec140b6-b33d-4d9f-b48a-f7e84ebe0bfb",
      "credentials": {
        "slackOAuth2Api": {
          "id": "aIFdokXUeAtAOjW0",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "operation": "create",
        "base": {
          "__rl": true,
          "value": "appu9xcTfFpUJ1pwp",
          "mode": "list",
          "cachedResultName": "Restaurant",
          "cachedResultUrl": "https://airtable.com/appu9xcTfFpUJ1pwp"
        },
        "table": {
          "__rl": true,
          "value": "tblb2LYwGNnjfF9eb",
          "mode": "list",
          "cachedResultName": "Menu",
          "cachedResultUrl": "https://airtable.com/appu9xcTfFpUJ1pwp/tblb2LYwGNnjfF9eb"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Dish Name": "={{ $('AI Agent').item.json.output['dish name'] }}",
            "Dish Description": "={{ $('AI Agent').item.json.output['dish description'] }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Dish Name",
              "displayName": "Dish Name",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Dish Description",
              "displayName": "Dish Description",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        760,
        680
      ],
      "id": "44caa5bb-a96c-4053-9ea3-9dba9bfb3825",
      "name": "Airtable",
      "credentials": {
        "airtableTokenApi": {
          "id": "GsTR1ZYQmElJWLUF",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Summarize the dish created:\n\nName: {{ $('AI Agent').item.json.output['dish name'] }}\nDescription: {{ $('AI Agent').item.json.output['dish description'] }}\n\nAnd also give a sentence about how tasty the dish is and what makes it so good."
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        1780,
        840
      ],
      "id": "d773a3d8-400d-4e85-b2bd-549044c3ba45",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1860,
        1020
      ],
      "id": "f4a1098f-72df-4ace-a990-ecd61f4df3e6",
      "name": "OpenAI Chat Model6",
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "![image](https://i.imgur.com/JNSaaiN.png)",
        "height": 360,
        "width": 560,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3440,
        1660
      ],
      "id": "380890d5-c9a4-4b8d-bb39-a72f450d7467",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "![image](https://i.imgur.com/zeStg3B.png)",
        "height": 380,
        "width": 1060,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2040,
        1660
      ],
      "id": "e71dd07e-d196-48ae-a7e9-153922857e08",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "![image](https://i.imgur.com/519Vkq6.png)",
        "height": 460,
        "width": 1000,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        100,
        1560
      ],
      "id": "c1ea16dd-fbdd-4741-a74f-3b161e127218",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "![image](https://i.imgur.com/zaIvptH.png)",
        "height": 380,
        "width": 860,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        4300,
        1660
      ],
      "id": "92543f0e-7c33-4e55-9031-aaa4f6844a56",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "![image](https://i.imgur.com/7eLXIMZ.png)",
        "height": 340,
        "width": 1200
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2060,
        1680
      ],
      "id": "9995d419-b80e-4b93-abdb-11891d471be0",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "![image](https://i.imgur.com/GQDk7ED.png)",
        "height": 520,
        "width": 1240
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "7f725f90-e2ad-453f-8235-860d1f5a70a2",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "# 🤖 The Seven Node Blueprint for AI Agents 🤖\n\n## **Agents are just graphs.**\n\nViewing AI agents as graphs provides a powerful mental model for designing systems. This approach breaks down complex agents into interconnected nodes, each with specific responsibilities. By thinking in graphs, we can:\n\n- **Modularize functionality** for better maintenance\n- **Scale complexity** through simple component connections\n- **Improve resilience** with explicit error handling paths\n- **Enable transparency** by making information flow visible\n\nThis is how you can design complex systems with ease (when necessary).\n\n## Node Types\n\n### 1️⃣ LLM Node 🧠\n\n**Purpose**: Reasoning, generation, and decision-making\n\n**Examples**: Planning, content generation, summarization\n\n**Why it's useful**: Acts as the \"brain\" that processes information and coordinates between components, handling ambiguity and novel situations.\n\n### 2️⃣ Tool Node 🛠️\n\n**Purpose**: Executes external tools or APIs\n\n**Examples**: Web search, code execution, database queries\n\n**Why it's useful**: Extends capabilities beyond language processing, connecting the agent to external systems and real-time data.\n\n### 3️⃣ Control Node ⚙️\n\n**Purpose**: Handles logic, branching, and deterministic rules\n\n**Examples**: Routing, conditionals, filters\n\n**Why it's useful**: Introduces predictability and enables consistent handling of different cases and business logic.\n\n### 4️⃣ Memory Node 📚\n\n**Purpose**: Reads/writes to memory for stateful context\n\n**Examples**: Vector DBs, conversation history, user preferences\n\n**Why it's useful**: Maintains context over time, enabling personalization and self-evolution.\n\n### 5️⃣ Guardrail Node 🚧\n\n**Purpose**: Validates outputs and enforces constraints\n\n**Examples**: Content filtering, format validation, safety checks\n\n**Why it's useful**: Ensures outputs meet required standards, preventing harmful or incorrect responses.\n\n### 6️⃣ Fallback Node 🔄\n\n**Purpose**: Responds to failures with retries or alternate flows\n\n**Examples**: Retries, escalation paths, default responses\n\n**Why it's useful**: Provides graceful degradation when things go wrong rather than complete failure.\n\n### 7️⃣ User Input Node 👥\n\n**Purpose**: Brings humans into the loop for clarification or decisions\n\n**Examples**: Confirmations, clarification requests, approvals\n\n**Why it's useful**: Leverages human judgment for critical situations where AI might not be sufficient.\n\n## Building with the Blueprint\n\nWhen designing agents as graphs:\n\n1. **Start simple**, then add complexity as needed\n2. **Identify natural breakpoints** for different node types\n3. **Plan for failures** with fallbacks and validation\n4. **Balance automation with control** through human touchpoints\n5. **Visualize the flow** to spot bottlenecks or unnecessary complexity\n\nBy thoughtfully combining these node types, we can build AI systems that are more capable, reliable, and aligned with human needs.",
        "height": 1940,
        "width": 960,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4940,
        440
      ],
      "id": "7a436ae2-499d-4ee9-baef-4e18d5b619b9",
      "name": "Sticky Note14"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -340,
        2180
      ],
      "id": "bf629717-be7b-43e9-a364-8f9d52f1a0c4",
      "name": "When chat message received",
      "webhookId": "7b60c4b1-d0df-4d52-a046-5597a516bd32"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -4680,
        4460
      ],
      "id": "889eb189-e72f-4011-aecc-20d0c160baf2",
      "name": "AI Agent6"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -4800,
        4700
      ],
      "id": "07365648-86c2-4ed0-b46b-141908e86ebe",
      "name": "OpenAI Chat Model7",
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -4620,
        4700
      ],
      "id": "e85fa609-284b-49ca-8049-05d8fdec1655",
      "name": "Postgres Chat Memory3",
      "credentials": {
        "postgres": {
          "id": "ezhtjmm7WxmXJLU8",
          "name": "Self Hosted Supabase"
        }
      }
    },
    {
      "parameters": {
        "name": "subagent",
        "description": "Call this agent when you need to do web research. message is the query for web search",
        "workflowId": {
          "__rl": true,
          "value": "={{ $workflow.id }}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "message": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('message', ``, 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "message",
              "displayName": "message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        -4320,
        4700
      ],
      "id": "0dc7e16f-77c8-47bc-9e5b-47e69102af5b",
      "name": "Call Subagent"
    },
    {
      "parameters": {
        "operation": "create",
        "base": {
          "__rl": true,
          "value": "appu9xcTfFpUJ1pwp",
          "mode": "list",
          "cachedResultName": "Restaurant",
          "cachedResultUrl": "https://airtable.com/appu9xcTfFpUJ1pwp"
        },
        "table": {
          "__rl": true,
          "value": "tblb2LYwGNnjfF9eb",
          "mode": "list",
          "cachedResultName": "Dishes",
          "cachedResultUrl": "https://airtable.com/appu9xcTfFpUJ1pwp/tblb2LYwGNnjfF9eb"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Dish Name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Dish_Name', ``, 'string') }}",
            "Dish Description": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Dish_Description', ``, 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Dish Name",
              "displayName": "Dish Name",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Dish Description",
              "displayName": "Dish Description",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtableTool",
      "typeVersion": 2.1,
      "position": [
        -4460,
        4700
      ],
      "id": "0a14b0f0-2737-4b21-b154-6ce9289a96d5",
      "name": "Airtable3",
      "credentials": {
        "airtableTokenApi": {
          "id": "GsTR1ZYQmElJWLUF",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -3920,
        4460
      ],
      "id": "8e8b5a1b-d762-4cf7-b5b5-07b1849c97a5",
      "name": "AI Agent8"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -3980,
        4700
      ],
      "id": "22d9c69a-f4f9-46fd-b2fe-5901fee6c92d",
      "name": "OpenAI Chat Model12",
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Use this tool to search the web with Brave.",
        "url": "https://api.search.brave.com/res/v1/web/search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "parametersQuery": {
          "values": [
            {
              "name": "q"
            }
          ]
        },
        "sendHeaders": true,
        "parametersHeaders": {
          "values": [
            {
              "name": "Accept",
              "valueProvider": "fieldValue",
              "value": "application/json"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        -3680,
        4700
      ],
      "id": "ea6d234a-635c-4e91-92f1-55d67216948b",
      "name": "Brave Web Search",
      "credentials": {
        "httpHeaderAuth": {
          "id": "vM51hriUc9B8cNEv",
          "name": "Brave API Key"
        }
      }
    },
    {
      "parameters": {
        "content": "## Multi-Agent: Primary Agent with Subagent as Tool",
        "height": 545,
        "width": 1576,
        "color": 6
      },
      "id": "f0c9da35-73a9-4c0a-91fe-751d405f3f6c",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -5080,
        4360
      ]
    },
    {
      "parameters": {
        "content": "![image](https://i.imgur.com/TB8LORF.png)",
        "height": 360,
        "width": 560,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4340,
        3980
      ],
      "id": "cb219d08-6ce8-4586-ab15-8c029a19c86a",
      "name": "Sticky Note13"
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are a helpful assistant. You also have the ability to do agent handoffs. For the structured output, the agent type can be 'web_search' if you want to delegate the task to the web search agent. Then it will be 'airtable' if you want to delegate to the Airtable agent. Otherwise, if you just want to output directly and you don't need to call one of those agents or hand off to them, then you can just simply output into the output field and for the agent field say NA."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -2700,
        4660
      ],
      "id": "0dbf500a-af7b-4ece-8044-5b96bee8a355",
      "name": "AI Agent7"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2860,
        4900
      ],
      "id": "3b386b6b-072b-4fc9-8024-9fc025202a95",
      "name": "OpenAI Chat Model11",
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -2700,
        4900
      ],
      "id": "98bc66ea-bf08-414f-b11a-5989bbaf5804",
      "name": "Postgres Chat Memory6",
      "credentials": {
        "postgres": {
          "id": "ezhtjmm7WxmXJLU8",
          "name": "Self Hosted Supabase"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"agent\": \"web_search\",\n\t\"output\": \"How can I help you today?\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -2380,
        4900
      ],
      "id": "698b31c5-c326-443c-b9b7-b7b31068843a",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output.agent }}",
                    "rightValue": "web_search",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "d21b35bc-7624-4067-b89f-dd65e2065a16"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d82a03b9-e1a3-433c-a105-4f3db90ca1da",
                    "leftValue": "={{ $json.output.agent }}",
                    "rightValue": "airtable",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8e02c21e-e810-4c05-8ae3-6d885f54e9f5",
                    "leftValue": "={{ $json.output.agent }}",
                    "rightValue": "NA",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": 2
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -2340,
        4660
      ],
      "id": "806b9eb4-0926-45fe-bacc-8efd0f8a4702",
      "name": "Switch3"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When chat message received').item.json.chatInput }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -1960,
        4420
      ],
      "id": "fdf8583c-4208-4427-b1b4-f48801b0019d",
      "name": "AI Agent9"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2020,
        4620
      ],
      "id": "be36d9c3-c0d9-4dbf-8ce0-8e1cad1d3ded",
      "name": "OpenAI Chat Model14",
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Use this tool to search the web with Brave.",
        "url": "https://api.search.brave.com/res/v1/web/search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "parametersQuery": {
          "values": [
            {
              "name": "q"
            }
          ]
        },
        "sendHeaders": true,
        "parametersHeaders": {
          "values": [
            {
              "name": "Accept",
              "valueProvider": "fieldValue",
              "value": "application/json"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        -1720,
        4620
      ],
      "id": "83c2da58-7966-4428-be56-c1708ee82cae",
      "name": "Brave Web Search1",
      "credentials": {
        "httpHeaderAuth": {
          "id": "vM51hriUc9B8cNEv",
          "name": "Brave API Key"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When chat message received').item.json.sessionId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -1880,
        4620
      ],
      "id": "8fc06c9e-4bf7-4123-997d-9d80d9fe9c91",
      "name": "Postgres Chat Memory7",
      "credentials": {
        "postgres": {
          "id": "ezhtjmm7WxmXJLU8",
          "name": "Self Hosted Supabase"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When chat message received').item.json.chatInput }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -1960,
        4800
      ],
      "id": "21bdeb1a-4c9d-49e0-a8f4-b32e8cd3f6cb",
      "name": "AI Agent10"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2020,
        5000
      ],
      "id": "0373dab0-daf9-418d-be66-9677ae2ffff9",
      "name": "OpenAI Chat Model15",
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When chat message received').item.json.sessionId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -1880,
        5000
      ],
      "id": "491543b5-0ff2-407b-80db-9b43c5307650",
      "name": "Postgres Chat Memory8",
      "credentials": {
        "postgres": {
          "id": "ezhtjmm7WxmXJLU8",
          "name": "Self Hosted Supabase"
        }
      }
    },
    {
      "parameters": {
        "operation": "create",
        "base": {
          "__rl": true,
          "value": "appu9xcTfFpUJ1pwp",
          "mode": "list",
          "cachedResultName": "Restaurant",
          "cachedResultUrl": "https://airtable.com/appu9xcTfFpUJ1pwp"
        },
        "table": {
          "__rl": true,
          "value": "tblb2LYwGNnjfF9eb",
          "mode": "list",
          "cachedResultName": "Dishes",
          "cachedResultUrl": "https://airtable.com/appu9xcTfFpUJ1pwp/tblb2LYwGNnjfF9eb"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Dish Name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Dish_Name', ``, 'string') }}",
            "Dish Description": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Dish_Description', ``, 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Dish Name",
              "displayName": "Dish Name",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Dish Description",
              "displayName": "Dish Description",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtableTool",
      "typeVersion": 2.1,
      "position": [
        -1720,
        5000
      ],
      "id": "e05df9ae-0fa6-41bc-bcb8-30a68afd3f7e",
      "name": "Airtable4",
      "credentials": {
        "airtableTokenApi": {
          "id": "GsTR1ZYQmElJWLUF",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Multi-Agent: Primary Agent with Agent Handoffs",
        "height": 825,
        "width": 1556
      },
      "id": "8a3aa5bb-92fd-47eb-9f0f-08a9beb55bf6",
      "name": "Sticky Note15",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3040,
        4360
      ]
    },
    {
      "parameters": {
        "content": "![image](https://i.imgur.com/yUUjVMv.png)",
        "height": 500,
        "width": 660
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2280,
        3840
      ],
      "id": "42211f93-ded7-4c33-ab1d-07dd90347419",
      "name": "Sticky Note16"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C08S4Q8CWGH",
          "mode": "list",
          "cachedResultName": "all-youtube"
        },
        "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Message_Text', ``, 'string') }}",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slackTool",
      "typeVersion": 2.3,
      "position": [
        -2540,
        4900
      ],
      "id": "bfdf7daf-2961-4c24-9c54-3ec5ec479740",
      "name": "Slack5",
      "webhookId": "90061d65-d37e-4746-a707-ef3d0e70b72e",
      "credentials": {
        "slackOAuth2Api": {
          "id": "aIFdokXUeAtAOjW0",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You are a helpful routing assistant. Based on the prompt from the user, your job is to route the request to the right agent. For the structured output, the agent type can be 'web_search' if you want to delegate the task to the web search agent. Then it will be 'airtable' if you want to delegate to the Airtable agent."
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        -660,
        4700
      ],
      "id": "ff2e549b-068d-41cf-bcad-5764a76f92f0",
      "name": "Basic LLM Chain1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -700,
        4920
      ],
      "id": "6fff5a55-c920-4ea1-a5b0-1957cc2baa75",
      "name": "OpenAI Chat Model16",
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"agent\": \"web_search\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -520,
        4920
      ],
      "id": "87cca736-736c-49c4-aedd-87887de5da4a",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output.agent }}",
                    "rightValue": "web_search",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "d21b35bc-7624-4067-b89f-dd65e2065a16"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d82a03b9-e1a3-433c-a105-4f3db90ca1da",
                    "leftValue": "={{ $json.output.agent }}",
                    "rightValue": "airtable",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": 0
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -220,
        4700
      ],
      "id": "52249401-9111-47b4-8b5f-d23f0837eb97",
      "name": "Switch4"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When chat message received').item.json.chatInput }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        160,
        4460
      ],
      "id": "7d278556-35ea-4751-9b94-0aff229ff0fd",
      "name": "AI Agent11"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        100,
        4660
      ],
      "id": "8067aa88-3165-4851-b864-174f363c5c8f",
      "name": "OpenAI Chat Model17",
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Use this tool to search the web with Brave.",
        "url": "https://api.search.brave.com/res/v1/web/search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "parametersQuery": {
          "values": [
            {
              "name": "q"
            }
          ]
        },
        "sendHeaders": true,
        "parametersHeaders": {
          "values": [
            {
              "name": "Accept",
              "valueProvider": "fieldValue",
              "value": "application/json"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        400,
        4660
      ],
      "id": "0a9eb155-3300-4634-8022-491f1715fe15",
      "name": "Brave Web Search2",
      "credentials": {
        "httpHeaderAuth": {
          "id": "vM51hriUc9B8cNEv",
          "name": "Brave API Key"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When chat message received').item.json.sessionId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        240,
        4660
      ],
      "id": "de5a2f5e-051f-4d18-ba90-47d0a1564984",
      "name": "Postgres Chat Memory9",
      "credentials": {
        "postgres": {
          "id": "ezhtjmm7WxmXJLU8",
          "name": "Self Hosted Supabase"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When chat message received').item.json.chatInput }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        160,
        4840
      ],
      "id": "8cb7e6a0-d98a-4a17-984b-43db98a8ef6f",
      "name": "AI Agent12"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        100,
        5040
      ],
      "id": "291b0ee4-f007-4826-9fbf-41d15243a97a",
      "name": "OpenAI Chat Model18",
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When chat message received').item.json.sessionId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        240,
        5040
      ],
      "id": "3aea8297-e1dc-4500-a0af-c1d59819b6f9",
      "name": "Postgres Chat Memory10",
      "credentials": {
        "postgres": {
          "id": "ezhtjmm7WxmXJLU8",
          "name": "Self Hosted Supabase"
        }
      }
    },
    {
      "parameters": {
        "operation": "create",
        "base": {
          "__rl": true,
          "value": "appu9xcTfFpUJ1pwp",
          "mode": "list",
          "cachedResultName": "Restaurant",
          "cachedResultUrl": "https://airtable.com/appu9xcTfFpUJ1pwp"
        },
        "table": {
          "__rl": true,
          "value": "tblb2LYwGNnjfF9eb",
          "mode": "list",
          "cachedResultName": "Dishes",
          "cachedResultUrl": "https://airtable.com/appu9xcTfFpUJ1pwp/tblb2LYwGNnjfF9eb"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Dish Name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Dish_Name', ``, 'string') }}",
            "Dish Description": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Dish_Description', ``, 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Dish Name",
              "displayName": "Dish Name",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Dish Description",
              "displayName": "Dish Description",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtableTool",
      "typeVersion": 2.1,
      "position": [
        400,
        5040
      ],
      "id": "95ec84e3-9a08-48cb-9e08-ad4e3df162fb",
      "name": "Airtable5",
      "credentials": {
        "airtableTokenApi": {
          "id": "GsTR1ZYQmElJWLUF",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "content": "## LLM Driven Agent Routing",
        "height": 885,
        "width": 1596,
        "color": 4
      },
      "id": "bf7d0f5f-c230-4af2-a7a5-7387f543dc18",
      "name": "Sticky Note17",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1000,
        4360
      ]
    },
    {
      "parameters": {
        "content": "![image](https://i.imgur.com/8FmAhjS.png)",
        "height": 400,
        "width": 720,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -260,
        3940
      ],
      "id": "5c010a24-df98-491f-b322-4a77a6d7cbb7",
      "name": "Sticky Note18"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When chat message received').item.json.chatInput }}",
        "options": {
          "systemMessage": "=You are a helpful assistant. Your sole job is to research the lead the user mentioned with your Brave search tool. Simply output a summary of the lead based on your research. Your goal is to find the website, LinkedIn profile, and email address of the lead. But if you don't find any of these, just say that instead of making a value up."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1260,
        4460
      ],
      "id": "a9df77a8-62aa-4b03-9931-34450228fcfb",
      "name": "AI Agent13"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1200,
        4660
      ],
      "id": "d955f9e8-1f90-4ad1-b053-f43458371b7e",
      "name": "OpenAI Chat Model19",
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Use this tool to search the web with Brave.",
        "url": "https://api.search.brave.com/res/v1/web/search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "parametersQuery": {
          "values": [
            {
              "name": "q"
            }
          ]
        },
        "sendHeaders": true,
        "parametersHeaders": {
          "values": [
            {
              "name": "Accept",
              "valueProvider": "fieldValue",
              "value": "application/json"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        1500,
        4660
      ],
      "id": "3bfd08f0-bf0d-49f9-89dc-b0750eff981f",
      "name": "Brave Web Search3",
      "credentials": {
        "httpHeaderAuth": {
          "id": "vM51hriUc9B8cNEv",
          "name": "Brave API Key"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When chat message received').item.json.sessionId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        1340,
        4660
      ],
      "id": "e46ae4ca-a9e7-4aae-92b4-90d1ec7f36b3",
      "name": "Postgres Chat Memory11",
      "credentials": {
        "postgres": {
          "id": "ezhtjmm7WxmXJLU8",
          "name": "Self Hosted Supabase"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=The user's original message is:\n\n{{ $('When chat message received').item.json.chatInput }}\n\nAnd the previous agent researched the lead for you and came back with this information:\n\n{{ $json.output }}\n\nUse this information to create a record for the lead in Airtable or update the existing one. Check for a record for their name first before creating a new one.\n\nOutput a summary of the lead with all the information available (LinkedIn, email, website, notes, etc.)",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1800,
        4460
      ],
      "id": "ba087d5d-78a2-4e11-bb0c-f4a7ea3abbb8",
      "name": "AI Agent14"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1700,
        4660
      ],
      "id": "bc15d501-c3c5-4827-8b07-8bb945776110",
      "name": "OpenAI Chat Model20",
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When chat message received').item.json.sessionId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        1840,
        4660
      ],
      "id": "57f04a6f-3123-48bc-bfb3-890e8a486535",
      "name": "Postgres Chat Memory12",
      "credentials": {
        "postgres": {
          "id": "ezhtjmm7WxmXJLU8",
          "name": "Self Hosted Supabase"
        }
      }
    },
    {
      "parameters": {
        "operation": "upsert",
        "base": {
          "__rl": true,
          "value": "appLxZELIfy7oS8dg",
          "mode": "list",
          "cachedResultName": "Leads",
          "cachedResultUrl": "https://airtable.com/appLxZELIfy7oS8dg"
        },
        "table": {
          "__rl": true,
          "value": "tblQ4vwVJVnwPy0ic",
          "mode": "list",
          "cachedResultName": "Lead Data",
          "cachedResultUrl": "https://airtable.com/appLxZELIfy7oS8dg/tblQ4vwVJVnwPy0ic"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Name', ``, 'string') }}",
            "Notes": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Notes', ``, 'string') }}",
            "Email": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Email', ``, 'string') }}",
            "Website": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Website', ``, 'string') }}",
            "LinkedIn": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('LinkedIn', ``, 'string') }}"
          },
          "matchingColumns": [
            "Name"
          ],
          "schema": [
            {
              "id": "Name",
              "displayName": "Name",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Notes",
              "displayName": "Notes",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Email",
              "displayName": "Email",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Website",
              "displayName": "Website",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "LinkedIn",
              "displayName": "LinkedIn",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtableTool",
      "typeVersion": 2.1,
      "position": [
        2000,
        4660
      ],
      "id": "389ddcc1-89a7-42ee-beab-2b0d99bfaab4",
      "name": "Airtable6",
      "credentials": {
        "airtableTokenApi": {
          "id": "GsTR1ZYQmElJWLUF",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "appLxZELIfy7oS8dg",
          "mode": "list",
          "cachedResultName": "Leads",
          "cachedResultUrl": "https://airtable.com/appLxZELIfy7oS8dg"
        },
        "table": {
          "__rl": true,
          "value": "tblQ4vwVJVnwPy0ic",
          "mode": "list",
          "cachedResultName": "Lead Data",
          "cachedResultUrl": "https://airtable.com/appLxZELIfy7oS8dg/tblQ4vwVJVnwPy0ic"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtableTool",
      "typeVersion": 2.1,
      "position": [
        2140,
        4660
      ],
      "id": "4aaddf47-219b-4757-85a9-f0d8409f9a38",
      "name": "Airtable1",
      "credentials": {
        "airtableTokenApi": {
          "id": "GsTR1ZYQmElJWLUF",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=The user's original message is:\n\n{{ $('When chat message received').item.json.chatInput }}\n\nAnd the previous agent researched the lead for you and came back with this information:\n\n{{ $json.output }}\n\nUse this information to draft an email to send to the lead to get them to buy our services (AI consulting). Search their website first if available to get more context.",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        2400,
        4460
      ],
      "id": "93a18410-89a6-4706-a2a8-15cb96ab1ba3",
      "name": "AI Agent15"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2340,
        4660
      ],
      "id": "8a0e1a7f-cbf5-4d53-b368-61cb4d6be18a",
      "name": "OpenAI Chat Model21",
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When chat message received').item.json.sessionId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        2480,
        4660
      ],
      "id": "3d7d02a5-873e-423a-aac0-f85cea527079",
      "name": "Postgres Chat Memory13",
      "credentials": {
        "postgres": {
          "id": "ezhtjmm7WxmXJLU8",
          "name": "Self Hosted Supabase"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "=Search website - use this tool to get the HTML back for a website.",
        "url": "={website_url}",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "website_url",
              "description": "The website to visit and get the HTML for",
              "type": "string"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        2660,
        4660
      ],
      "id": "532b618e-c656-4d8c-b85c-4b2743df1a06",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "name": "draft_email",
        "description": "=Call this tool to draft an email.",
        "jsCode": "return \"Email drafted!\""
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.1,
      "position": [
        2820,
        4660
      ],
      "id": "2e19a858-0f35-4f20-a89b-724a058cb7e6",
      "name": "Draft Email"
    },
    {
      "parameters": {
        "content": "## Parallel Multi Agent Workflow",
        "height": 1185,
        "width": 1996,
        "color": 3
      },
      "id": "25a38562-885f-4d6e-947c-5081e7467620",
      "name": "Sticky Note19",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3640,
        4360
      ]
    },
    {
      "parameters": {
        "content": "![image](https://i.imgur.com/HhCnl1o.png)",
        "height": 420,
        "width": 820,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1940,
        3920
      ],
      "id": "8758606b-ecd1-4d81-901b-26a41e3489b7",
      "name": "Sticky Note20"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When chat message received').item.json.chatInput }}",
        "options": {
          "systemMessage": "=You are a helpful assistant. The user will be giving you a business idea and your sole job is to research SEO strategies for the business with your Brave search tool. Simply output all of your SEO research."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        4200,
        4420
      ],
      "id": "5d2a98f5-7eee-4ce4-953d-088d6acd9c0b",
      "name": "AI Agent16"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        4140,
        4620
      ],
      "id": "dc997f03-3e2c-4958-b18b-978b1a023354",
      "name": "OpenAI Chat Model22",
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Use this tool to search the web with Brave.",
        "url": "https://api.search.brave.com/res/v1/web/search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "parametersQuery": {
          "values": [
            {
              "name": "q"
            }
          ]
        },
        "sendHeaders": true,
        "parametersHeaders": {
          "values": [
            {
              "name": "Accept",
              "valueProvider": "fieldValue",
              "value": "application/json"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        4440,
        4620
      ],
      "id": "deb694d7-9e8e-403b-9ad1-53d40a2109af",
      "name": "Brave Web Search4",
      "credentials": {
        "httpHeaderAuth": {
          "id": "vM51hriUc9B8cNEv",
          "name": "Brave API Key"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When chat message received').item.json.sessionId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        4280,
        4620
      ],
      "id": "2f99c809-833b-4dfa-9d13-9beced28cfa6",
      "name": "Postgres Chat Memory14",
      "credentials": {
        "postgres": {
          "id": "ezhtjmm7WxmXJLU8",
          "name": "Self Hosted Supabase"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When chat message received').item.json.chatInput }}",
        "options": {
          "systemMessage": "=You are a helpful assistant. The user will be giving you a business idea and your sole job is to research social media strategies for the business with your Brave search tool. Simply output all of your social media research."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        4200,
        4780
      ],
      "id": "49dd516b-a967-46cf-bb08-7ba046c6d947",
      "name": "AI Agent17"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        4140,
        4980
      ],
      "id": "95fc1bed-c290-4c1d-8953-a203229d0d5c",
      "name": "OpenAI Chat Model23",
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Use this tool to search the web with Brave.",
        "url": "https://api.search.brave.com/res/v1/web/search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "parametersQuery": {
          "values": [
            {
              "name": "q"
            }
          ]
        },
        "sendHeaders": true,
        "parametersHeaders": {
          "values": [
            {
              "name": "Accept",
              "valueProvider": "fieldValue",
              "value": "application/json"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        4440,
        4980
      ],
      "id": "fc63ea40-f59b-4e69-a0b6-449d322816d6",
      "name": "Brave Web Search5",
      "credentials": {
        "httpHeaderAuth": {
          "id": "vM51hriUc9B8cNEv",
          "name": "Brave API Key"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When chat message received').item.json.sessionId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        4280,
        4980
      ],
      "id": "77e21849-6f75-4868-a80a-a557cac9ba55",
      "name": "Postgres Chat Memory15",
      "credentials": {
        "postgres": {
          "id": "ezhtjmm7WxmXJLU8",
          "name": "Self Hosted Supabase"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When chat message received').item.json.chatInput }}",
        "options": {
          "systemMessage": "=You are a helpful assistant. The user will be giving you a business idea and your sole job is to research competitors for the business with your Brave search tool. Simply output all of your competitor research."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        4200,
        5140
      ],
      "id": "5d74e90a-6c7c-4344-becb-55e2ada5b441",
      "name": "AI Agent18"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        4140,
        5340
      ],
      "id": "b198e15a-f24a-432b-89bf-7a9c2542c774",
      "name": "OpenAI Chat Model24",
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Use this tool to search the web with Brave.",
        "url": "https://api.search.brave.com/res/v1/web/search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "parametersQuery": {
          "values": [
            {
              "name": "q"
            }
          ]
        },
        "sendHeaders": true,
        "parametersHeaders": {
          "values": [
            {
              "name": "Accept",
              "valueProvider": "fieldValue",
              "value": "application/json"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        4440,
        5340
      ],
      "id": "e93bb8d0-1076-4c37-8d55-86d2730e483f",
      "name": "Brave Web Search6",
      "credentials": {
        "httpHeaderAuth": {
          "id": "vM51hriUc9B8cNEv",
          "name": "Brave API Key"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('When chat message received').item.json.sessionId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        4280,
        5340
      ],
      "id": "f2f34eae-5e07-4dca-b17e-90390d39e029",
      "name": "Postgres Chat Memory16",
      "credentials": {
        "postgres": {
          "id": "ezhtjmm7WxmXJLU8",
          "name": "Self Hosted Supabase"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Here is a bunch of SEO, social media, and competitor research for a new business idea:\n\n{{ $json.output }}\n\nCreate a nice summary of all of this research."
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        5200,
        4780
      ],
      "id": "ba85496d-e65c-44bb-983b-818e3c045ebb",
      "name": "Basic LLM Chain2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        5300,
        4980
      ],
      "id": "4c430885-8ff5-4932-9bd4-490cb9da2a36",
      "name": "OpenAI Chat Model25",
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        4760,
        4780
      ],
      "id": "9f9ce71b-9434-43eb-bcb4-058e82f8ec9f",
      "name": "Merge"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "output"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        4980,
        4780
      ],
      "id": "29f406bd-6af4-4c98-a399-c45f1f86e98b",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "content": "## Sequential Multi Agent Workflow",
        "height": 505,
        "width": 1796,
        "color": 5
      },
      "id": "02fa33fb-a1b8-4c49-bf17-1461b839218b",
      "name": "Sticky Note21",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1160,
        4360
      ]
    },
    {
      "parameters": {
        "content": "![image](https://i.imgur.com/reDPXMR.png)",
        "height": 500,
        "width": 720,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        4600,
        3840
      ],
      "id": "53193232-b898-4f6f-9d72-6d1958c00265",
      "name": "Sticky Note22"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=You are a helpful assistant. You have three subagents you can invoke as tools - one for SEO research, one for social media research, and one for competitor research and analysis. You also share a \"think pad\" through a Google Doc with all of the other agents so you can share state without having the share the entire conversation history. Use this as you communicate with the agents and delegate subtasks to them.\n\nYour job is to take the request in from the user, and call the subagents as you see fit until you have all the necessary research around SEO, social media, and competitor analysis.\n\nSometimes you might do SEO research, some social media research, realize you need to do more SEO research so you call that subagent again, etc. You determine the best way to leverage the agents given to you based on the user request."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        7020,
        4440
      ],
      "id": "9647fea8-4858-483e-9cb9-f66c107f057c",
      "name": "AI Agent19"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        6900,
        4680
      ],
      "id": "519796bb-2cae-4541-952a-a63a8c0a2cde",
      "name": "OpenAI Chat Model26",
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        7080,
        4680
      ],
      "id": "8895c55d-d437-4539-8faf-7d17d939d636",
      "name": "Postgres Chat Memory17",
      "credentials": {
        "postgres": {
          "id": "ezhtjmm7WxmXJLU8",
          "name": "Self Hosted Supabase"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message }}",
        "options": {
          "systemMessage": "=You are a helpful assistant. The user will be giving you a business idea and your sole job is to research SEO strategies for the business with your Brave search tool. Simply output all of your SEO research.\n\nAlways use the Google Doc tools before you research anything (get doc content) and after you have done your research (update doc) to note down the key points from your research. Keep it concise.\n\nThen just output: \"Research done, use the Google Doc tool to get a summary.\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        7200,
        4900
      ],
      "id": "a71b37ac-9220-4b90-8d62-34df33eb1add",
      "name": "AI Agent20"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        7160,
        5060
      ],
      "id": "8cb6c852-6649-421b-be05-185639d23f45",
      "name": "OpenAI Chat Model27",
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Use this tool to search the web with Brave.",
        "url": "https://api.search.brave.com/res/v1/web/search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "parametersQuery": {
          "values": [
            {
              "name": "q"
            }
          ]
        },
        "sendHeaders": true,
        "parametersHeaders": {
          "values": [
            {
              "name": "Accept",
              "valueProvider": "fieldValue",
              "value": "application/json"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        7440,
        5060
      ],
      "id": "59eceed4-f6a6-478d-b6f1-679769070a69",
      "name": "Brave Web Search7",
      "credentials": {
        "httpHeaderAuth": {
          "id": "vM51hriUc9B8cNEv",
          "name": "Brave API Key"
        }
      }
    },
    {
      "parameters": {
        "content": "## Supervisor Pattern for Multi Agents",
        "height": 1545,
        "width": 1556,
        "color": 6
      },
      "id": "d953f121-4549-460a-a6c1-d97503f5a2a0",
      "name": "Sticky Note23",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        6520,
        4340
      ]
    },
    {
      "parameters": {
        "content": "![image](https://i.imgur.com/zTtVzJw.png)",
        "height": 440,
        "width": 920,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        7140,
        3880
      ],
      "id": "c26ac712-6652-4dda-a7ed-b64ecbdee62c",
      "name": "Sticky Note24"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message }}",
        "options": {
          "systemMessage": "=You are a helpful assistant. The user will be giving you a business idea and your sole job is to research social media strategies for the business with your Brave search tool. Simply output all of your social media research.\n\nAlways use the Google Doc tools before you research anything (get doc content) and after you have done your research (update doc) to note down the key points from your research. Keep it concise.\n\nThen just output: \"Research done, use the Google Doc tool to get a summary.\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        7200,
        5240
      ],
      "id": "254920c5-0ccc-4393-9375-c2420cea1999",
      "name": "AI Agent21"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        7160,
        5380
      ],
      "id": "062048e6-50b1-4c72-b2b2-8e43ac895dc0",
      "name": "OpenAI Chat Model28",
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Use this tool to search the web with Brave.",
        "url": "https://api.search.brave.com/res/v1/web/search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "parametersQuery": {
          "values": [
            {
              "name": "q"
            }
          ]
        },
        "sendHeaders": true,
        "parametersHeaders": {
          "values": [
            {
              "name": "Accept",
              "valueProvider": "fieldValue",
              "value": "application/json"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        7440,
        5380
      ],
      "id": "37ba4041-f6da-4cfd-ba39-ff18e4b6e65d",
      "name": "Brave Web Search8",
      "credentials": {
        "httpHeaderAuth": {
          "id": "vM51hriUc9B8cNEv",
          "name": "Brave API Key"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message }}",
        "options": {
          "systemMessage": "=You are a helpful assistant. The user will be giving you a business idea and your sole job is to research competitors for the business with your Brave search tool. Simply output all of your competitor research.\n\nAlways use the Google Doc tools before you research anything (get doc content) and after you have done your research (update doc) to note down the key points from your research. Keep it concise.\n\nThen just output: \"Research done, use the Google Doc tool to get a summary.\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        7200,
        5540
      ],
      "id": "cb192fe7-410f-48ea-981e-74053737ce8d",
      "name": "AI Agent22"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        7160,
        5700
      ],
      "id": "b489181a-b2c8-4e7e-995d-27049b926c95",
      "name": "OpenAI Chat Model29",
      "credentials": {
        "openAiApi": {
          "id": "KnSSZQEFv82oFpIv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Use this tool to search the web with Brave.",
        "url": "https://api.search.brave.com/res/v1/web/search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "parametersQuery": {
          "values": [
            {
              "name": "q"
            }
          ]
        },
        "sendHeaders": true,
        "parametersHeaders": {
          "values": [
            {
              "name": "Accept",
              "valueProvider": "fieldValue",
              "value": "application/json"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        7440,
        5700
      ],
      "id": "01c4d27e-79d5-4751-8d3c-28e4f17e31dc",
      "name": "Brave Web Search9",
      "credentials": {
        "httpHeaderAuth": {
          "id": "vM51hriUc9B8cNEv",
          "name": "Brave API Key"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.subagent }}",
                    "rightValue": "seo",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "0c779355-1bf5-4fb5-b231-01db9c97fa22"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7094c171-7a3f-42c2-848c-76f1c02a323c",
                    "leftValue": "={{ $json.subagent }}",
                    "rightValue": "social_media",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b1ec3470-51ec-49cb-9bd7-179baee88b69",
                    "leftValue": "={{ $json.subagent }}",
                    "rightValue": "competitors",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "none"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        6860,
        5240
      ],
      "id": "c67e4b8f-d21b-4c5c-b2d2-6d08efe2fc4f",
      "name": "Switch5"
    },
    {
      "parameters": {
        "name": "seo_subagent",
        "description": "Call this agent when you need to do web research for SEO. Message is what you need to research related to SEO.",
        "workflowId": {
          "__rl": true,
          "value": "={{ $workflow.id }}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "message": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('message', ``, 'string') }}",
            "subagent": "seo"
          },
          "matchingColumns": [
            "message"
          ],
          "schema": [
            {
              "id": "message",
              "displayName": "message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "subagent",
              "displayName": "subagent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        7500,
        4640
      ],
      "id": "2c45f96d-ae0a-41a8-aa8c-08c860b2d577",
      "name": "Call SEO Research Agent"
    },
    {
      "parameters": {
        "name": "social_media_subagent",
        "description": "Call this agent when you need to do web research for social media. Message is what you need to research related to social media.",
        "workflowId": {
          "__rl": true,
          "value": "={{ $workflow.id }}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "message": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('message', ``, 'string') }}",
            "subagent": "social_media"
          },
          "matchingColumns": [
            "message"
          ],
          "schema": [
            {
              "id": "message",
              "displayName": "message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "subagent",
              "displayName": "subagent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        7660,
        4640
      ],
      "id": "4168ca9a-b8ff-4c95-be61-c93872a08b09",
      "name": "Call Social Media Research Agent"
    },
    {
      "parameters": {
        "name": "competitor_subagent",
        "description": "=Call this agent when you need to do web research for competitor analysis. Message is what you need to research related to competitors.",
        "workflowId": {
          "__rl": true,
          "value": "={{ $workflow.id }}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "message": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('message', ``, 'string') }}",
            "subagent": "competitors"
          },
          "matchingColumns": [
            "message"
          ],
          "schema": [
            {
              "id": "message",
              "displayName": "message",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "subagent",
              "displayName": "subagent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        7860,
        4640
      ],
      "id": "3607ee66-4f6e-4e9e-b476-581dccbce666",
      "name": "Call Competitor Research Agent"
    },
    {
      "parameters": {
        "operation": "update",
        "documentURL": "15sBOoqCJjIggmtG9aEFPFe3AFS_G6iMOZQmT6wkkRVM",
        "actionsUi": {
          "actionFields": [
            {
              "action": "insert",
              "text": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Text', ``, 'string') }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.googleDocsTool",
      "typeVersion": 2,
      "position": [
        7800,
        5020
      ],
      "id": "70cbb8eb-6e68-43c9-b122-57d0d472267f",
      "name": "Google Docs",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "tJPWOFJCX9kAe4Zv",
          "name": "Google Docs account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "documentURL": "15sBOoqCJjIggmtG9aEFPFe3AFS_G6iMOZQmT6wkkRVM"
      },
      "type": "n8n-nodes-base.googleDocsTool",
      "typeVersion": 2,
      "position": [
        7800,
        5200
      ],
      "id": "f8babe78-c162-4c88-9f77-ae7f7e812de5",
      "name": "Google Docs1",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "tJPWOFJCX9kAe4Zv",
          "name": "Google Docs account"
        }
      }
    },
    {
      "parameters": {
        "content": "# 🤖 Multi-Agent Architecture Patterns 🤖\n\n## **From Single Agents to Multi-Agent Orchestrations**\n\nMulti-agent systems unlock capabilities that single agents simply can't achieve alone. By coordinating multiple specialized agents, we can build systems that are more capable, resilient, and scalable. AI agents are just like humans - specialization is a powerful way to increase performance! This guide demonstrates proven patterns for multi-agent coordination, progressing from simple to sophisticated approaches.\n\n## Why cover multi agent workflows and agent components in the same module?\n\nAs you build these patterns, certain components become essential for reliable multi-agent coordination:\n\n### **Guardrails in Multi-Agent Systems**\n- **Output validation**: Critic agents that validate other agents' work before handoffs\n- **Format enforcement**: Structured outputs ensure clean agent-to-agent communication\n- **Content filtering**: Safety checks become more critical when multiple agents contribute to outputs\n- **Cross-agent consistency**: Ensuring agents don't contradict each other's work\n\n### **Fallback Strategies**\n- **Agent redundancy**: Backup agents when primary specialists fail\n- **Graceful degradation**: Simpler agents take over when sophisticated ones fail\n- **Retry mechanisms**: Failed agent calls automatically retry with adjusted parameters\n- **Human escalation**: Complex multi-agent failures route to human oversight\n\n### **Human-in-the-Loop Integration**\n- **Strategic approval points**: Human validation at critical workflow junctions\n- **Quality gates**: Human review before agent handoffs in high-stakes scenarios\n- **Exception handling**: Humans intervene when multi-agent coordination breaks down\n- **Oversight dashboards**: Visibility into multi-agent decision-making processes\n\n### **Memory & State Management**\n- **Shared context**: Conversation memory accessible across all agents\n- **Coordination state**: Agents track what others have done to avoid duplication\n- **Persistent memory**: Important context survives across complex multi-agent workflows\n- **State synchronization**: Ensuring all agents work with consistent information\n\n## Key Takeaways\n\n🎯 **Start simple and evolve** - Begin with subagents as tools, then add complexity only as needed\n\n⚡ **Match pattern to problem** - Different coordination challenges require different architectural solutions\n\n🔧 **Design for coordination** - The magic is in how agents work together, not just individual capabilities\n\n🚀 **Plan for scale** - Simple patterns can evolve into sophisticated ones as your system grows\n\n🤝 **Keep humans involved** - Even advanced multi-agent systems benefit from strategic human oversight\n\nBy understanding this progression from simple to sophisticated patterns, you can build multi-agent systems that grow with your needs while maintaining clarity and reliability.",
        "height": 1240,
        "width": 960,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -6420,
        3740
      ],
      "id": "bb696ccd-cf84-485b-a372-2db08f93653b",
      "name": "Sticky Note25"
    },
    {
      "parameters": {
        "content": "### 1️⃣ **Multi-Agent with Subagents as Tools**\n\n**Structure**: Primary agent calls specialized subagents as tools\n\n**How it works**: The primary agent has access to other agents as if they were regular tools (like web search or databases). When it needs specialized help, it calls the appropriate subagent and receives the result.\n\n**Example**:\n```\nPrimary Agent\n    ├─ Tool: Web Search\n    ├─ Tool: Database Query\n    ├─ Tool: Research Subagent\n    └─ Tool: Analysis Subagent\n```\n\n**When to use**:\n- You have a main agent that occasionally needs specialized help\n- Subagents have distinct, well-defined capabilities\n- You want simple coordination without complex routing logic\n\n**Benefits**:\n- Easy to implement and understand\n- Primary agent makes intelligent decisions about when to use subagents\n- Clean separation between general and specialized capabilities",
        "height": 560,
        "width": 540,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -4900,
        3780
      ],
      "id": "ed83e671-97dc-489d-af54-b754685dbdde",
      "name": "Sticky Note27"
    },
    {
      "parameters": {
        "content": "### 2️⃣ **Agent Handoffs**\n\n**Structure**: Agents pass work to each other based on predefined rules\n\n**How it works**: Each agent handles its specialized task, then explicitly hands off to the next appropriate agent. The handoff decision is built into each agent's logic.\n\n**Example**:\n```\nContent Agent (creates draft)\n    ↓ [handoff trigger: content complete]\nReview Agent (validates quality)\n    ↓ [handoff trigger: approved/needs revision]\nPublishing Agent (final output) OR Revision Agent (fixes issues)\n```\n\n**When to use**:\n- Clear workflow stages with distinct responsibilities\n- Each agent knows which agent should handle the work next\n- You want explicit control over the workflow progression\n\n**Benefits**:\n- Predictable workflow progression\n- Each agent owns its handoff decisions\n- Easy to add new agents to existing workflows",
        "height": 540,
        "width": 640
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2940,
        3800
      ],
      "id": "2e916b8c-11c3-4a12-b23d-ca05564cdd44",
      "name": "Sticky Note28"
    },
    {
      "parameters": {
        "content": "### 3️⃣ **LLM-Driven Routing**\n\n**Structure**: A dedicated router agent decides which specialist agent should handle each task\n\n**How it works**: A routing agent analyzes the incoming request and uses its reasoning capabilities to determine which specialist agent is best suited for the task.\n\n**Example**:\n```\nRequest → Router Agent (analyzes task)\n    ├─ \"research needed\" → Research Agent\n    ├─ \"data analysis\" → Analytics Agent\n    └─ \"content creation\" → Content Agent\n```\n\n**When to use**:\n- Tasks require intelligent routing decisions\n- Routing logic is complex or context-dependent\n- You want flexible agent selection based on request nuances\n\n**Benefits**:\n- Intelligent routing based on context and reasoning\n- Easy to add new specialist agents without changing existing ones\n- Flexible and adaptive to different request types",
        "height": 540,
        "width": 600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -880,
        3800
      ],
      "id": "fb2dad8e-b18c-4d2e-8379-088bf17a0c94",
      "name": "Sticky Note29"
    },
    {
      "parameters": {
        "content": "### 4️⃣ **Sequential Multi-Agent**\n\n**Structure**: Agents work in a pipeline, each building on the previous agent's output\n\n**How it works**: Work flows through multiple agents in sequence, with each agent adding value before passing results to the next stage.\n\n**Example**:\n```\nResearch Agent (gathers information)\n    ↓ [structured data]\nAnalysis Agent (processes findings)\n    ↓ [insights and recommendations]\nReport Agent (creates final output)\n```\n\n**When to use**:\n- Tasks naturally break into sequential stages\n- Each stage requires different expertise or tools\n- You need clear processing pipelines with audit trails\n\n**Benefits**:\n- Clear separation of concerns and responsibilities\n- Easy to debug and modify individual stages\n- Natural error isolation between stages",
        "height": 540,
        "width": 600,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1320,
        3800
      ],
      "id": "f4555dc0-51af-4628-9747-2d1998b81fbd",
      "name": "Sticky Note30"
    },
    {
      "parameters": {
        "content": "### 5️⃣ **Parallel Multi-Agent**\n\n**Structure**: Multiple agents work simultaneously on different aspects, then results are combined\n\n**How it works**: Independent agents tackle different parts of the problem concurrently, then a coordination mechanism merges their outputs into a final result.\n\n**Example**:\n```\nSEO Research Agent     ─┐\nSocial Media Agent     ─┤ → Merge → Synthesis Agent → Final Report\nCompetitor Agent       ─┘\n```\n\n**When to use**:\n- Different aspects of work can be done independently\n- Speed is important (parallelization reduces total time)\n- You want fault tolerance (one agent failure doesn't stop others)\n\n**Benefits**:\n- Faster execution through parallel processing\n- Specialized expertise for each domain\n- Resilient to individual agent failures",
        "height": 520,
        "width": 700,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3880,
        3820
      ],
      "id": "31fc4135-c3c1-4653-8b5a-96729b9efc91",
      "name": "Sticky Note31"
    },
    {
      "parameters": {
        "content": "### 6️⃣ **Supervisor Pattern**\n\n**Structure**: A supervisor agent dynamically orchestrates multiple subagents based on evolving needs\n\n**How it works**: The supervisor maintains overall context and makes intelligent decisions about which subagents to call, when to call them, and how to coordinate their work. Unlike simpler patterns, the supervisor can call agents multiple times and adapt its strategy based on results.\n\n**Example**:\n```\nSupervisor Agent\n    ├─ Analyzes overall task\n    ├─ Calls Research Subagent\n    ├─ Reviews results, decides more research needed\n    ├─ Calls Research Subagent again with refined query\n    ├─ Calls Analysis Subagent\n    ├─ Coordinates between subagents via shared state\n    └─ Synthesizes final output\n```\n\n**When to use**:\n- Complex tasks requiring adaptive coordination\n- Unpredictable workflows that need intelligent orchestration\n- Multiple subagents need to collaborate and share state\n\n**Benefits**:\n- Intelligent, adaptive coordination\n- Can handle complex, unpredictable workflows\n- Optimal resource utilization through dynamic planning\n- Enables sophisticated multi-agent collaboration",
        "height": 660,
        "width": 600,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        6520,
        3660
      ],
      "id": "12193aa8-2ae3-439e-8905-46dc5c2f56d3",
      "name": "Sticky Note32"
    }
  ],
  "pinData": {},
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent4",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Critic Node",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Slack": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Slack1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Slack2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Slack3": {
      "main": [
        [
          {
            "node": "Switch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch2": {
      "main": [
        [
          {
            "node": "Slack4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Trigger": {
      "main": [
        [
          {
            "node": "Slack7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Slack3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Menu Table": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model8": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Extract Memories",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get Memories": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Memories": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Save Memories",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Memories": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent4": {
      "main": [
        [
          {
            "node": "Critic Node",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "Extract Memories",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser3": {
      "ai_outputParser": [
        [
          {
            "node": "Critic Node",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Critic Node": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory2": {
      "ai_memory": [
        [
          {
            "node": "AI Agent4",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model9": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent5",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory4": {
      "ai_memory": [
        [
          {
            "node": "AI Agent5",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Call n8n Workflow Tool": {
      "ai_tool": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Slack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Airtable2": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Slack9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory5": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser4": {
      "ai_outputParser": [
        [
          {
            "node": "Auto-fixing Output Parser1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model13": {
      "ai_languageModel": [
        [
          {
            "node": "Auto-fixing Output Parser1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Auto-fixing Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model10": {
      "ai_languageModel": [
        [
          {
            "node": "Extract Memories1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Save Memories1": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Memories1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Memories1": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Save Memories1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Slack8",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack8": {
      "main": [
        [
          {
            "node": "Airtable",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack9": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Airtable": {
      "main": [
        [
          {
            "node": "Extract Memories1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model6": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model7": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent6",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory3": {
      "ai_memory": [
        [
          {
            "node": "AI Agent6",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Call Subagent": {
      "ai_tool": [
        [
          {
            "node": "AI Agent6",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Airtable3": {
      "ai_tool": [
        [
          {
            "node": "AI Agent6",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model12": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent8",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Brave Web Search": {
      "ai_tool": [
        [
          {
            "node": "AI Agent8",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model11": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent7",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory6": {
      "ai_memory": [
        [
          {
            "node": "AI Agent7",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent7",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent7": {
      "main": [
        [
          {
            "node": "Switch3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model14": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent9",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Brave Web Search1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent9",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Switch3": {
      "main": [
        [
          {
            "node": "AI Agent9",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory7": {
      "ai_memory": [
        [
          {
            "node": "AI Agent9",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model15": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent10",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory8": {
      "ai_memory": [
        [
          {
            "node": "AI Agent10",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Airtable4": {
      "ai_tool": [
        [
          {
            "node": "AI Agent10",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Slack5": {
      "ai_tool": [
        [
          {
            "node": "AI Agent7",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model16": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Switch4": {
      "main": [
        [
          {
            "node": "AI Agent11",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model17": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent11",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Brave Web Search2": {
      "ai_tool": [
        [
          {
            "node": "AI Agent11",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory9": {
      "ai_memory": [
        [
          {
            "node": "AI Agent11",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model18": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent12",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory10": {
      "ai_memory": [
        [
          {
            "node": "AI Agent12",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Airtable5": {
      "ai_tool": [
        [
          {
            "node": "AI Agent12",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain1": {
      "main": [
        [
          {
            "node": "Switch4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model19": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent13",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Brave Web Search3": {
      "ai_tool": [
        [
          {
            "node": "AI Agent13",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory11": {
      "ai_memory": [
        [
          {
            "node": "AI Agent13",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model20": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent14",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory12": {
      "ai_memory": [
        [
          {
            "node": "AI Agent14",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent13": {
      "main": [
        [
          {
            "node": "AI Agent14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Airtable6": {
      "ai_tool": [
        [
          {
            "node": "AI Agent14",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Airtable1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent14",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model21": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent15",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory13": {
      "ai_memory": [
        [
          {
            "node": "AI Agent15",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent14": {
      "main": [
        [
          {
            "node": "AI Agent15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "ai_tool": [
        [
          {
            "node": "AI Agent15",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Draft Email": {
      "ai_tool": [
        [
          {
            "node": "AI Agent15",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model22": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent16",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Brave Web Search4": {
      "ai_tool": [
        [
          {
            "node": "AI Agent16",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory14": {
      "ai_memory": [
        [
          {
            "node": "AI Agent16",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model23": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent17",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Brave Web Search5": {
      "ai_tool": [
        [
          {
            "node": "AI Agent17",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory15": {
      "ai_memory": [
        [
          {
            "node": "AI Agent17",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model24": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent18",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Brave Web Search6": {
      "ai_tool": [
        [
          {
            "node": "AI Agent18",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory16": {
      "ai_memory": [
        [
          {
            "node": "AI Agent18",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent16": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent17": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "AI Agent18": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "OpenAI Chat Model25": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Basic LLM Chain2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model26": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent19",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory17": {
      "ai_memory": [
        [
          {
            "node": "AI Agent19",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model27": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent20",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Brave Web Search7": {
      "ai_tool": [
        [
          {
            "node": "AI Agent20",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model28": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent21",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Brave Web Search8": {
      "ai_tool": [
        [
          {
            "node": "AI Agent21",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model29": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent22",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Brave Web Search9": {
      "ai_tool": [
        [
          {
            "node": "AI Agent22",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Switch5": {
      "main": [
        [
          {
            "node": "AI Agent20",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent21",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent22",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent20": {
      "main": [
        []
      ]
    },
    "Call SEO Research Agent": {
      "ai_tool": [
        [
          {
            "node": "AI Agent19",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Call Social Media Research Agent": {
      "ai_tool": [
        [
          {
            "node": "AI Agent19",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Call Competitor Research Agent": {
      "ai_tool": [
        [
          {
            "node": "AI Agent19",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Docs": {
      "ai_tool": [
        [
          {
            "node": "AI Agent19",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "AI Agent20",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "AI Agent21",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "AI Agent22",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Docs1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent19",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "AI Agent20",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "AI Agent21",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "AI Agent22",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e70a5332-db5e-4cb1-90e4-07bf800af57d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "283ffa8d05f0aea5fd537be52c7be659b3a880d9175d738aa61bb7798a0dea8e"
  },
  "id": "bYikV64wrmIndWFA",
  "tags": []
}