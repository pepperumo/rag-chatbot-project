{
  "name": "AI Agent Mastery P1",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "b5641996-fca0-4219-bae5-45ae6b8df469",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -940,
        560
      ],
      "credentials": {
        "openAiApi": {
          "id": "05Q6PbnSdyEcu9Ze",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Edit Fields').item.json.sessionId }}"
      },
      "id": "0134fb97-a087-4432-99a7-6622f4e210cb",
      "name": "Postgres Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1,
      "position": [
        -780,
        560
      ],
      "notesInFlow": false,
      "credentials": {
        "postgres": {
          "id": "PPVUOCGy8dTN3kdl",
          "name": "Live Agent Studio Test"
        }
      }
    },
    {
      "parameters": {
        "content": "## RAG AI Agent with Chat Interface",
        "height": 525,
        "width": 1096
      },
      "id": "23a074ec-e40c-418c-9dbc-28f6db58b4d5",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1280,
        220
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "f3d96028-582f-4060-a8e1-f3a8c0eea312",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -420,
        300
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9a9a245e-f1a1-4282-bb02-a81ffe629f0f",
              "name": "chatInput",
              "value": "={{ $json?.chatInput || $json.body.chatInput }}",
              "type": "string"
            },
            {
              "id": "b80831d8-c653-4203-8706-adedfdb98f77",
              "name": "sessionId",
              "value": "={{ $json?.sessionId || $json.body.sessionId}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "0b2b48c5-1b9e-4353-9f86-d3f4414c3f8b",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -980,
        300
      ]
    },
    {
      "parameters": {
        "public": true,
        "options": {}
      },
      "id": "948a4361-384e-40bd-bf13-c51e7aab7db5",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -1240,
        300
      ],
      "webhookId": "cae89443-b227-45c6-9f31-e2e26385497f"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "600e08cc-00e2-42f0-bfb4-315a527af0f2",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "f9d28a10-9cc0-4083-af1e-3642f18edb47",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1240,
        500
      ],
      "webhookId": "600e08cc-00e2-42f0-bfb4-315a527af0f2",
      "credentials": {
        "httpHeaderAuth": {
          "id": "o5akNgXQQR74Sezh",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "options": {
          "systemMessage": "You are a personal assistant who helps answer questions from a corpus of documents. The documents are either text based (Txt, docs, extracted PDFs, etc.) or tabular data (CSVs or Excel documents).\n\nYou are given tools to perform RAG in the 'documents' table, look up the documents available in your knowledge base in the 'document_metadata' table, extract all the text from a given document, and query the tabular files with SQL in the 'document_rows' table.\n\nAlways start by performing RAG unless the question requires a SQL query for tabular data (fetching a sum, finding a max, something a RAG lookup would be unreliable for). If RAG doesn't help, then look at the documents that are available to you, find a few that you think would contain the answer, and then analyze those.\n\nAlways tell the user if you didn't find the answer. Don't make something up just to please them."
        }
      },
      "id": "7bedd14c-3287-43ed-b29b-eda9af5f0c03",
      "name": "RAG AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        -760,
        300
      ]
    },
    {
      "parameters": {
        "name": "web_search",
        "description": "Call this tool to do an advanced web search based on a query you define.",
        "workflowId": {
          "__rl": true,
          "value": "={{ $workflow.id }}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "query": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('query', ``, 'string') }}",
            "image_url": "NA",
            "tool_type": "web_search"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "tool_type",
              "displayName": "tool_type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "query",
              "displayName": "query",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            },
            {
              "id": "image_url",
              "displayName": "image_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string"
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        -620,
        560
      ],
      "id": "27df5e06-42d7-4531-8317-8f792e03aec6",
      "name": "Web Search Tool"
    },
    {
      "parameters": {
        "content": "## Workflow Agent Tools",
        "height": 340,
        "width": 1100,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1280,
        760
      ],
      "id": "c3f5822f-5f59-419e-8327-cb89f4f8fb7b",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.tool_type }}",
                    "rightValue": "image_analysis",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "6bfea957-1997-44bb-be85-7b2be354e47e"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a50a5a5a-cc87-4654-97ea-05090efdb416",
                    "leftValue": "={{ $json.tool_type }}",
                    "rightValue": "web_search",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "none"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -980,
        860
      ],
      "id": "c8b4ee68-a284-42c2-b1df-1f1de80162d1",
      "name": "Determine Tool Type"
    },
    {
      "parameters": {
        "url": "=https://api.search.brave.com/res/v1/web/search?q={{ $('Tool Start').item.json.query }} }}&summary=1",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -700,
        860
      ],
      "id": "277cddde-edd1-467d-88a9-d9c0a28c2cb0",
      "name": "Brave Web Search",
      "credentials": {
        "httpHeaderAuth": {
          "id": "vQywoUkt33Kl6bxG",
          "name": "Brave API"
        }
      }
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "tool_type"
            },
            {
              "name": "query"
            },
            {
              "name": "image_url"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1220,
        860
      ],
      "id": "16c9d308-610a-43ae-9ea6-d99de9c6dcc9",
      "name": "Tool Start"
    },
    {
      "parameters": {
        "url": "=https://api.search.brave.com/res/v1/summarizer/search?key={{ $json.summarizer.key }}&entity_info=1",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip"
            }
          ]
        },
        "options": {}
      },
      "id": "c9a58677-8243-442b-bd32-6fcc5fa1b0e0",
      "name": "Summarize Web Research",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -440,
        860
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "vQywoUkt33Kl6bxG",
          "name": "Brave API"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "RAG AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RAG AI Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook": {
      "main": [
        []
      ]
    },
    "Web Search Tool": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Determine Tool Type": {
      "main": [
        [],
        [
          {
            "node": "Brave Web Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tool Start": {
      "main": [
        [
          {
            "node": "Determine Tool Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Brave Web Search": {
      "main": [
        [
          {
            "node": "Summarize Web Research",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "27ad7263-d047-476f-9582-cbfbc656c32a",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f65a08c0adc90a3cde2c633d24c6daecde3817033b75588ee10a781b0b7aa3f5"
  },
  "id": "31li2tEB2J9Hpp3a",
  "tags": []
}